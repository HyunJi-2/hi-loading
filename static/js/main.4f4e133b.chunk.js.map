{"version":3,"sources":["component/PopupUploade.js","App.js","serviceWorker.js","index.js"],"names":["PopupUploade","props","percentage","open","react_default","a","createElement","id","className","style","width","type","title","defaultProps","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","PopupOpen","setState","uploading","setInterval","state","clearInterval","onClick","component_PopupUploade","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEMA,EAAe,SAACC,GAClB,IAAMC,EAAaD,EAAMC,WACnBC,EAAOF,EAAME,KAEnB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAAYC,WAAoB,IAATL,EAAgB,iBAAmB,aAC9DC,EAAAC,EAAAC,cAAA,OAAKE,UAAW,4BACZJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACXJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,OAAb,mDACAJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,WAAUJ,EAAAC,EAAAC,cAAA,UAAKJ,GAA5B,KACAE,EAAAC,EAAAC,cAAA,QAAME,UAAU,gBACZJ,EAAAC,EAAAC,cAAA,QAAMG,MAAO,CAAEC,MAAOR,EAAW,QAErCE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACXJ,EAAAC,EAAAC,cAAA,UAAQK,KAAK,SAASH,UAAU,aAAhC,gBACAJ,EAAAC,EAAAC,cAAA,UAAQK,KAAK,QAAQH,UAAU,aAA/B,iBAEJJ,EAAAC,EAAAC,cAAA,UAAQK,KAAK,SAASH,UAAW,qBAAsBI,MAAM,gBAA7D,kBAGRR,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cAK3BR,EAAaa,aAAe,CACxBX,WAAY,IACZC,MAAM,GAGKH,QCGAc,qBA9BX,SAAAA,EAAYb,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMjB,KAMVqB,UAAY,WACRP,EAAKQ,SAAS,CAACpB,MAAM,IAErB,IAAMqB,EAAYC,YAAY,WAC1BV,EAAKQ,SAAS,CAACrB,WAAaa,EAAKW,MAAMxB,WAAa,IAEvB,MAA1Ba,EAAKW,MAAMxB,YACVyB,cAAcH,IAEnB,KAdHT,EAAKW,MAAQ,CACTvB,MAAM,EACND,WAAY,GAJDa,wEAqBf,OACIX,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,YAAYoB,QAASV,KAAKI,WAA5C,sBACAlB,EAAAC,EAAAC,cAACuB,EAAD,CAAc3B,WAAYgB,KAAKQ,MAAMxB,WAAYC,KAAMe,KAAKQ,MAAMvB,eAzBhE2B,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4f4e133b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst PopupUploade = (props) => {\r\n    const percentage = props.percentage;\r\n    const open = props.open;\r\n\r\n    return (\r\n        <div id=\"popUpload\" className={open === true ? 'pop_modal open' : 'pop_modal'}>\r\n            <div className={\"popup_type1 popup_upload\"}>\r\n                <div className=\"inner\">\r\n                    <p className=\"txt\">동영상 업로드 중...</p>\r\n                    <p className=\"percent\"><em>{percentage}</em>%</p>\r\n                    <span className=\"progress_bar\">\r\n                        <span style={{ width: percentage+\"%\"}}></span>\r\n                    </span>\r\n                    <div className=\"btns\">\r\n                        <button type=\"button\" className=\"btn_type2\">확인</button>\r\n                        <button type=\"reset\" className=\"btn_type3\">취소</button>\r\n                    </div>\r\n                    <button type=\"button\" className={\"btn_comm btn_close\"} title=\"닫기\">닫기</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"overlay\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nPopupUploade.defaultProps = {\r\n    percentage: '0',\r\n    open: false\r\n};\r\n\r\nexport default PopupUploade;\r\n","import React, { Component } from \"react\";\nimport PopupUploade from \"./component/PopupUploade\";\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            percentage: 0\n        };\n    }\n    PopupOpen = () => {\n        this.setState({open: true});\n\n        const uploading = setInterval(() => {\n            this.setState({percentage : this.state.percentage + 1});\n            // console.log(this.state.percentage);\n            if(this.state.percentage === 100){\n                clearInterval(uploading);\n            }\n        }, 10);\n\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <button className=\"btn_type7\" onClick={this.PopupOpen}>업로드</button>\n                <PopupUploade percentage={this.state.percentage} open={this.state.open}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}