{"version":3,"sources":["component/ModalCloseButton.js","component/ModalLayer.js","App.js","serviceWorker.js","index.js"],"names":["ModalCloseButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","modalClose","bind","assertThisInitialized","modalButtonEvent","modalId","e","buttonindex","target","getAttribute","modalIndex","Number","_this2","_this$props","buttons","hasCloseButton","react_default","a","createElement","className","map","v","i","key","type","data-buttonindex","class","onClick","name","React","Component","defaultProps","ModalLayer","id","modalWindow","document","getElementById","classList","remove","replace","RegExp","split","join","buttonIndex","width","title","titleClass","hasIcon","widthStyle","style","children","component_ModalCloseButton","concat","App","PopupOpen","uploading","setInterval","setState","percentage","state","StopInterval","clearInterval","handleReject","modal1","classNameList","add","finishModal","component_ModalLayer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc33e899.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n * 모달 하단 버튼\r\n * @param buttons\r\n * @param modalButtonEvent\r\n * @param hasCloseButton : 기본 닫기 버튼 유무\r\n * @param modalClose\r\n * @param modalIndex\r\n */\r\nclass ModalCloseButton extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.modalClose = this.modalClose.bind(this);\r\n    this.modalButtonEvent = this.modalButtonEvent.bind(this);\r\n  }\r\n\r\n  modalClose() {\r\n    this.props.modalClose(this.props.modalId);\r\n  }\r\n\r\n  modalButtonEvent(e) {\r\n    const buttonindex = e.target.getAttribute(\"data-buttonindex\");\r\n    const { modalIndex } = this.props;\r\n    this.props.modalButtonEvent(Number(buttonindex), Number(modalIndex));\r\n  }\r\n\r\n  render() {\r\n    const { buttons, hasCloseButton } = this.props;\r\n\r\n    return (\r\n      <div className=\"btns\">\r\n        {buttons.map((v, i) => (\r\n          <button\r\n            key={i}\r\n            type=\"button\"\r\n            data-buttonindex={i}\r\n            className={v.class}\r\n            onClick={this.modalButtonEvent}\r\n          >\r\n            {v.name}\r\n          </button>\r\n        ))}\r\n        {hasCloseButton ? (\r\n          <button type=\"button\" className=\"btn_type4\" onClick={this.modalClose}>\r\n            닫기\r\n          </button>\r\n        ) : (\r\n          <span />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nModalCloseButton.defaultProps = {\r\n  buttons: [],\r\n  hasCloseButton: false\r\n};\r\n\r\nexport default ModalCloseButton;\r\n","import React from \"react\";\r\nimport ModalCloseButton from \"./ModalCloseButton\";\r\n\r\n/**\r\n * 레이어\r\n * @param modalId\r\n * @param className\r\n * @param modalTitle\r\n * @param modalBody\r\n */\r\nclass ModalLayer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.modalClose = this.modalClose.bind(this);\r\n        this.modalButtonEvent = this.modalButtonEvent.bind(this);\r\n    }\r\n\r\n    modalClose(modalId) {\r\n        const id = modalId ? modalId : this.props.modalId;\r\n        const modalWindow = document.getElementById(id);\r\n        modalWindow.classList\r\n            ? modalWindow.classList.remove(\"open\")\r\n            : (modalWindow.className = modalWindow.className.replace(\r\n            new RegExp(\"(^|\\\\b)\" + \"open\".split(\" \").join(\"|\") + \"(\\\\b|$)\", \"gi\"),\r\n            \" \"\r\n        ));\r\n    }\r\n\r\n    modalButtonEvent(buttonIndex, modalIndex) {\r\n        this.props.modalButtonEvent(buttonIndex, modalIndex);\r\n    }\r\n\r\n    render() {\r\n        // options\r\n        const {\r\n            width, // width\r\n            modalId, // id\r\n            className, // class\r\n            title, // title\r\n            titleClass, // title class\r\n            hasIcon, // 경고 아이콘 표시\r\n            buttons, // 하단 버튼(기본 닫기 제외)\r\n            hasCloseButton, // 하단 기본 닫기 버튼\r\n            modalIndex // modal 여러개 일 경우 index\r\n        } = this.props;\r\n\r\n        const widthStyle = { width: width + \"px\" };\r\n\r\n        return (\r\n            <div id={modalId} className=\"pop_modal\">\r\n                <div className={className} style={widthStyle}>\r\n                    <div className=\"inner\">\r\n                        <strong className={titleClass} /* \"fc_blue tit_popup\" */>\r\n                            {hasIcon ? <span className=\"ico_comm2 ico_alert\" /> : <span />}\r\n                            {title}\r\n                        </strong>\r\n                        {this.props.children}\r\n\r\n                        {/* 하단 버튼 */}\r\n                        <ModalCloseButton\r\n                            buttons={buttons}\r\n                            modalButtonEvent={this.modalButtonEvent}\r\n                            hasCloseButton={hasCloseButton}\r\n                            modalClose={this.modalClose}\r\n                            modalIndex={modalIndex}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"overlay\" onClick={e => this.modalClose(`${modalId}`)} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nModalLayer.defaultProps = {\r\n    titleClass: \"fc_blue tit_popup\"\r\n};\r\n\r\nexport default ModalLayer;\r\n","import React, { Component } from \"react\";\nimport ModalLayer from \"./component/ModalLayer\";\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            percentage: 0\n        };\n        this.handleReject = this.handleReject.bind(this);\n    }\n\n    PopupOpen = () => {\n        const uploading = setInterval(() => {\n            this.setState({percentage : this.state.percentage + 1});\n            // console.log(this.state.percentage);\n            if(this.state.percentage === 100){\n                this.StopInterval(uploading);\n            }\n        }, 10);\n\n        return this.state = {\n            percentage: 0\n        };\n    };\n    StopInterval = (e) => {\n        clearInterval(e);\n    };\n\n    handleReject() {\n        finishModal(\"popUpload\");\n        this.PopupOpen();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <button className=\"btn_type7\" onClick={this.handleReject}>업로드</button>\n\n                <ModalLayer\n                    modalId=\"popUpload\"\n                    title=\"동영상 업로드 중...\"\n                    className=\"popup_type1 popup_upload\"\n                    hasCloseButton={false}\n                    modalIndex={0}\n                    width=\"425\"\n                    buttons={[\n                        {\n                            name: \"확인\",\n                            class: \"btn_type2\"\n                        },\n                        {\n                            name: \"취소\",\n                            class: \"btn_type3\"\n                        }\n                    ]}\n                >\n                    <p className=\"percent\"><em>{this.state.percentage}</em>%</p>\n                    <span className=\"progress_bar\">\n                        <span style={{ width: this.state.percentage+\"%\"}}>&nbsp;</span>\n                    </span>\n                    <button type=\"button\" className=\"btn_comm btn_close\" title=\"닫기\">닫기</button>\n                </ModalLayer>\n            </div>\n        );\n    }\n}\nexport default App;\n\nfunction finishModal(modalId) {\n    if (modalId === \"popUpload\") {\n        const modal1 = document.getElementById(\"popUpload\");\n        modal1.classNameList\n            ? modal1.classNameList.add(\"open\")\n            : (modal1.className += \" \" + \"open\");\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}